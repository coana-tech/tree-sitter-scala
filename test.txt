  annotations:
      1. âœ“ [32mClasses[0m
      2. âœ“ [32mDeclarations and definitions[0m
      3. âœ“ [32mParameters[0m
      4. âœ“ [32mTypes[0m
  comments:
      5. âœ“ [32mSingle line comments[0m
      6. âœ“ [32mBlock comments[0m
      7. âœ“ [32mSingle line comments with block comment[0m
      8. âœ“ [32mBlock comment with single-line comment inside[0m
      9. âœ“ [32mUsing directives[0m
     10. âœ“ [32mShebang[0m
  definitions:
     11. âœ“ [32mIdentifiers[0m
     12. âœ“ [32m$ in identifier names[0m
     13. âœ“ [32mOperator identifiers[0m
     14. âœ“ [32mPackage[0m
     15. âœ“ [32mPackage with comma[0m
     16. âœ“ [32mPackage (Scala 3 syntax)[0m
     17. âœ“ [32mPackage object[0m
     18. âœ“ [32mImports[0m
     19. âœ“ [32mImports: Wildcard[0m
     20. âœ“ [32mImports: Wildcard (Scala 3 syntax)[0m
     21. âœ“ [32mImports: Wildcard and wildcard givens (Scala 3 syntax)[0m
     22. âœ“ [32mImports: Givens by type (Scala 3 syntax)[0m
     23. âœ“ [32mImports: Rename (Scala 3 Syntax)[0m
     24. âœ“ [32mImports: Rename[0m
     25. âœ“ [32mObject definitions[0m
     26. âœ“ [32mObject definitions[0m
     27. âœ“ [32mClass definitions[0m
     28. âœ“ [32mClass definitions (Scala 3)[0m
     29. âœ“ [32mSubclass definitions[0m
     30. âœ“ [32mSubclass definitions (Scala 3 syntax)[0m
     31. âœ“ [32mClass definitions with parameters[0m
     32. âœ“ [32mClass definitions with parameters (Scala 3 syntax)[0m
     33. âœ“ [32mModifiers[0m
     34. âœ“ [32mTrait definitions[0m
     35. âœ“ [32mValue declarations[0m
     36. âœ“ [32mValue declarations (Scala 3 syntax)[0m
     37. âœ“ [32mValue definitions[0m
     38. âœ“ [32mVariable declarations[0m
     39. âœ“ [32mVariable definitions[0m
     40. âœ“ [32mVariable definitions (Scala 3 syntax)[0m
     41. âœ“ [32mType definitions[0m
     42. âœ“ [32mType definitions (Scala 3 syntax)[0m
     43. âœ“ [32mFunction declarations[0m
     44. âœ“ [32mFunction definitions[0m
     45. âœ“ [32mFunction definitions (Scala 3 syntax)[0m
     46. âœ“ [32mExtension methods (Scala 3 syntax)[0m
     47. âœ“ [32mGiven instance definitions (Scala 3 syntax)[0m
     48. âœ“ [32mTop-level Definitions (Scala 3 syntax)[0m
     49. âœ“ [32mInitialization expressions[0m
     50. âœ“ [32mOptional parameters[0m
     51. âœ“ [32mEnums (Scala 3)[0m
     52. âœ“ [32mSelf types[0m
     53. âœ“ [32mInline methods and parameters (Scala 3)[0m
     54. âœ“ [32mInline val (Scala 3)[0m
     55. âœ“ [32mInline given (Scala 3)[0m
     56. âœ“ [32mInfix methods (Scala 3)[0m
     57. âœ“ [32mOpen classes (Scala 3)[0m
     58. âœ“ [32mTraits (Scala 3)[0m
     59. âœ“ [32mExports (Scala 3)[0m
  expressions:
     60. âœ“ [32mCall expressions[0m
     61. âœ“ [32mCall expressions (Scala 3 syntax)[0m
     62. âœ“ [32mSIP-44 Fewer braces (Scala 3 syntax)[0m
     63. âœ“ [32mGeneric functions[0m
     64. âœ“ [32mAssignments[0m
     65. âœ“ [32mIf expressions[0m
     66. âœ— [31mIf expressions (Scala 3 syntax)[0m
     67. âœ“ [32mTry expressions[0m
     68. âœ— [31mTry expressions (Scala 3 syntax)[0m
     69. âœ— [31mMatch expressions[0m
     70. âœ— [31mMatch expressions (Scala 3 syntax)[0m
     71. âœ“ [32mField expressions[0m
     72. âœ“ [32mInstance expressions[0m
     73. âœ“ [32mInfix expressions[0m
     74. âœ“ [32mPrefix expressions[0m
     75. âœ“ [32mPostfix expressions[0m
     76. âœ“ [32mAscription Expression[0m
     77. âœ“ [32mLambda Expression[0m
     78. âœ“ [32mLambda Expression (Scala 3 syntax)[0m
     79. âœ“ [32mUnit expressions[0m
     80. âœ“ [32mReturn expressions[0m
     81. âœ“ [32mWhile loops[0m
     82. âœ“ [32mWhile loops (Scala 3 syntax)[0m
     83. âœ“ [32mDo-while loops[0m
     84. âœ“ [32mFor comprehensions[0m
     85. âœ“ [32mFor comprehensions (Scala 3 syntax)[0m
     86. âœ“ [32mChained expressions[0m
     87. âœ“ [32mMacros (Scala 2 syntax)[0m
     88. âœ“ [32mMacros (Scala 3 syntax)[0m
     89. âœ“ [32mInline matches (Scala 3)[0m
     90. âœ“ [32mInline if (Scala 3)[0m
     91. âœ“ [32mNested inline if and match (Scala 3)[0m
     92. âœ“ [32mTop-level expressions[0m
     93. âœ“ [32mSoft keywords used as identifiers (Scala 3)[0m
  literals:
     94. âœ“ [32mSimple strings[0m
     95. âœ“ [32mInterpolated strings[0m
     96. âœ“ [32mInteger literals[0m
     97. âœ“ [32mFloating point literals[0m
     98. âœ“ [32mBoolean literals[0m
     99. âœ“ [32mCharacter literals[0m
    100. âœ“ [32mNull[0m
    101. âœ“ [32mTuple literals[0m
  patterns:
    102. âœ“ [32mAlternative patterns[0m
    103. âœ“ [32mTyped patterns[0m
    104. âœ“ [32mTuple patterns[0m
    105. âœ“ [32mName tuple patterns (Scala 3 syntax)[0m
    106. âœ— [31mCase class patterns[0m
    107. âœ“ [32mCase class patterns (Scala 3 syntax)[0m
    108. âœ“ [32mInfix patterns[0m
    109. âœ“ [32mCapture patterns[0m
    110. âœ“ [32mQuoted patterns (Scala 3 syntax)[0m
    111. âœ— [31mGiven pattern (Scala 3 syntax)[0m
  types:
    112. âœ“ [32mStable type identifiers[0m
    113. âœ“ [32mGeneric types[0m
    114. âœ“ [32mTuple types[0m
    115. âœ“ [32mNamed tuple types (Scala 3 syntax)[0m
    116. âœ— [31mFunction types[0m
    117. âœ— [31mPolymorphic function types (Scala 3 syntax)[0m
    118. âœ“ [32mContext function types (Scala 3 syntax)[0m
    119. âœ“ [32mMatch types (Scala 3 syntax)[0m
    120. âœ— [31mCompound types[0m
    121. âœ“ [32mInfix types[0m
    122. âœ“ [32mVariant Types[0m
    123. âœ“ [32mUpper bound[0m
    124. âœ“ [32mLower bound[0m
    125. âœ“ [32mLower and upper bounds[0m
    126. âœ“ [32mView bound[0m
    127. âœ“ [32mContext bound[0m
    128. âœ“ [32mContext bound (Scala 3 syntax)[0m
    129. âœ“ [32mProjections[0m
    130. âœ“ [32mComplex types[0m
    131. âœ“ [32mLiteral type aliases (Scala 2.13+)[0m
    132. âœ“ [32mSingleton Types[0m
    133. âœ“ [32mOpaque type aliases (Scala 3)[0m
    134. âœ“ [32mStructural type[0m
    135. âœ“ [32mAnonymous structural type with projection[0m
    136. âœ“ [32mType Lambdas (Scala 3)[0m
    137. âœ“ [32mUnion and Intersection Types (Scala 3)[0m

9 failures:

correct / [32mexpected[0m / [31munexpected[0m

  1. If expressions (Scala 3 syntax):

    (compilation_unit
      (class_definition
        (identifier)
        (template_body
          (function_definition
            (identifier)
            (parameters)
            (indented_block
              (if_expression
                (identifier)
                (call_expression
                  (identifier)
                  (arguments)))
              (if_expression
                (indented_block
                  (val_definition
                    (identifier)
                    (boolean_literal))
                  (identifier))
                (indented_block
                  (call_expression
                    (identifier)
                    (arguments))
                  (integer_literal))
[31m                (indented_block
[0m[31m                  (if_expression
[0m[31m                    (identifier)
[0m[32m                (if_expression
[0m[32m                  (identifier)
[0m[32m                  (indented_block
[0m                    (call_expression
                      (identifier)
[32m                      (arguments)))
[0m[32m                  (indented_block
[0m[32m                    (call_expression
[0m[32m                      (identifier)
[0m                      (arguments)))))
[31m              (identifier)
[0m[31m              (call_expression
[0m[31m                (identifier)
[0m[31m                (arguments))
[0m              (if_expression
                (boolean_literal)
                (indented_block
[31m                  (unit))
[0m[32m                  (unit)
[0m[32m                  (comment))
[0m                (indented_block
                  (unit)))
              (if_expression
                (infix_expression
                  (parenthesized_expression
                    (identifier))
                  (operator_identifier)
                  (call_expression
                    (identifier)
                    (arguments
                      (identifier))))
                (return_expression
                  (boolean_literal)))
              (if_expression
                (infix_expression
                  (parenthesized_expression
                    (identifier))
                  (operator_identifier)
                  (field_expression
                    (identifier)
                    (identifier)))
                (indented_block
                  (unit))))))))


  2. Try expressions (Scala 3 syntax):

    (compilation_unit
      (function_definition
        (identifier)
        (parameters)
        (type_identifier)
        (indented_block
          (try_expression
            (call_expression
              (identifier)
              (arguments))
            (finally_clause
              (infix_expression
                (identifier)
                (operator_identifier)
                (integer_literal))))
          (try_expression
            (indented_block
              (call_expression
                (identifier)
                (arguments))
              (call_expression
                (identifier)
                (arguments)))
            (catch_clause
              (indented_cases
                (case_clause
                  (typed_pattern
                    (identifier)
                    (type_identifier))
                  (call_expression
                    (identifier)
                    (arguments
                      (field_expression
                        (identifier)
                        (identifier)))))
                (case_clause
                  (case_class_pattern
                    (type_identifier)
                    (identifier))
                  (throw_expression
                    (instance_expression
                      (type_identifier)
                      (arguments
                        (identifier)))))))
            (finally_clause
              (indented_block
                (call_expression
                  (identifier)
                  (arguments))
                (call_expression
                  (identifier)
                  (arguments)))))
          (try_expression
            (identifier)
            (catch_clause
              (typed_pattern
                (identifier)
                (type_identifier))
              (identifier))
            (finally_clause
              (identifier)))
          (try_expression
            (identifier)
            (catch_clause
              (typed_pattern
                (identifier)
                (type_identifier))
[31m              (indented_block
[0m[31m                (identifier)))))))[0m
[32m              (identifier))))))[0m


  3. Match expressions:

    (compilation_unit
      (function_definition
        (identifier)
        (parameters
          (parameter
            (identifier)
            (type_identifier)))
        (type_identifier)
        (match_expression
          (identifier)
          (case_block
            (case_clause
              (integer_literal))
            (case_clause
              (integer_literal)
              (string)
              (string))
            (case_clause
              (integer_literal)
              (string))
            (case_clause
              (integer_literal)
              (block
                (string)))
            (case_clause
[31m              (integer_literal)
[0m[31m              (indented_block))
[0m[32m              (integer_literal))
[0m            (case_clause
              (identifier)
              (guard
                (infix_expression
                  (identifier)
                  (operator_identifier)
                  (integer_literal))))
            (case_clause
              (identifier)
              (guard
                (infix_expression
                  (identifier)
                  (operator_identifier)
                  (integer_literal)))
[31m              (indented_block
[0m[31m                (integer_literal)))
[0m[32m              (integer_literal))
[0m            (case_clause
              (tuple_pattern
                (tuple_pattern
                  (identifier)
                  (wildcard)))
              (identifier))
            (case_clause
              (interpolated_string_expression
                (identifier)
                (interpolated_string
                  (interpolation
                    (identifier))
                  (interpolation
                    (identifier))))
[31m              (indented_block
[0m[31m                (infix_expression
[0m[31m                  (identifier)
[0m[31m                  (operator_identifier)
[0m[31m                  (identifier))))
[0m[32m              (infix_expression
[0m[32m                (identifier)
[0m[32m                (operator_identifier)
[0m[32m                (identifier)))
[0m            (case_clause
              (wildcard)
[31m              (indented_block
[0m[31m                (val_definition
[0m[31m                  (identifier)
[0m[31m                  (string))
[0m[31m                (string)))
[0m[32m              (val_definition
[0m[32m                (identifier)
[0m[32m                (string))
[0m[32m              (string))
[0m            (case_clause
              (identifier)
              (guard
                (identifier))
[31m              (indented_block
[0m[31m                (identifier)))))))[0m
[32m              (identifier))))))[0m


  4. Match expressions (Scala 3 syntax):

    (compilation_unit
      (function_definition
        (identifier)
        (parameters
          (parameter
            (identifier)
            (type_identifier)))
        (type_identifier)
        (indented_block
          (match_expression
            (identifier)
            (indented_cases
              (case_clause
                (integer_literal))
              (case_clause
                (integer_literal)
                (string)
                (string))
              (case_clause
                (integer_literal)
                (string))
              (case_clause
                (identifier)
                (guard
                  (infix_expression
                    (identifier)
                    (operator_identifier)
                    (integer_literal)))
[31m                (indented_block
[0m[31m                  (val_definition
[0m[31m                    (identifier)
[0m[31m                    (string))
[0m[31m                  (identifier)))
[0m[32m                (val_definition
[0m[32m                  (identifier)
[0m[32m                  (string))
[0m[32m                (identifier))
[0m              (case_clause
                (tuple_pattern
                  (tuple_pattern
                    (identifier)
                    (wildcard)))
                (identifier))
              (case_clause
                (wildcard)
[31m                (indented_block
[0m[31m                  (val_definition
[0m[31m                    (identifier)
[0m[31m                    (string))
[0m[31m                  (string))))))))[0m
[32m                (val_definition
[0m[32m                  (identifier)
[0m[32m                  (string))
[0m[32m                (string)))))))[0m


  5. Case class patterns:

    (compilation_unit
      (function_definition
        (identifier)
        (parameters
          (parameter
            (identifier)
            (type_identifier)))
        (type_identifier)
        (block
          (match_expression
            (identifier)
            (case_block
              (case_clause
                (case_class_pattern
                  (type_identifier)
                  (identifier)
                  (identifier)
                  (wildcard))
[31m                (indented_block
[0m[31m                  (interpolated_string_expression
[0m[31m                    (identifier)
[0m[31m                    (interpolated_string
[0m[31m                      (interpolation
[0m[31m                        (identifier))
[0m[31m                      (interpolation
[0m[31m                        (identifier))))))
[0m[32m                (interpolated_string_expression
[0m[32m                  (identifier)
[0m[32m                  (interpolated_string
[0m[32m                    (interpolation
[0m[32m                      (identifier))
[0m[32m                    (interpolation
[0m[32m                      (identifier)))))
[0m              (case_clause
                (case_class_pattern
                  (type_identifier)
                  (identifier)
                  (identifier))
[31m                (indented_block
[0m[31m                  (interpolated_string_expression
[0m[31m                    (identifier)
[0m[31m                    (interpolated_string
[0m[31m                      (interpolation
[0m[31m                        (identifier))
[0m[31m                      (interpolation
[0m[31m                        (identifier))))))
[0m[32m                (interpolated_string_expression
[0m[32m                  (identifier)
[0m[32m                  (interpolated_string
[0m[32m                    (interpolation
[0m[32m                      (identifier))
[0m[32m                    (interpolation
[0m[32m                      (identifier)))))
[0m              (case_clause
                (case_class_pattern
                  (type_identifier)
                  (identifier)
                  (identifier))
[31m                (indented_block
[0m[31m                  (interpolated_string_expression
[0m[31m                    (identifier)
[0m[31m                    (interpolated_string
[0m[31m                      (interpolation
[0m[31m                        (identifier))
[0m[31m                      (interpolation
[0m[31m                        (identifier)))))))))))[0m
[32m                (interpolated_string_expression
[0m[32m                  (identifier)
[0m[32m                  (interpolated_string
[0m[32m                    (interpolation
[0m[32m                      (identifier))
[0m[32m                    (interpolation
[0m[32m                      (identifier))))))))))[0m


  6. Given pattern (Scala 3 syntax):

    (compilation_unit
      (for_expression
        (enumerators
          (enumerator
            (given_pattern
              (type_identifier))
            (call_expression
              (identifier)
              (arguments
                (integer_literal)))))
[31m        (indented_block
[0m[31m          (unit))))[0m
[32m        (unit)))[0m


  7. Function types:

    (compilation_unit
      (object_definition
        (identifier)
        (template_body
          (type_definition
            (type_identifier)
            (function_type
              (parameter_types
[31m                (tuple_type
[0m[31m                  (type_identifier)
[0m[31m                  (type_identifier)))
[0m[32m                (type_identifier)
[0m[32m                (type_identifier))
[0m              (type_identifier)))
          (type_definition
            (type_identifier)
            (function_type
              (parameter_types
[31m                (tuple_type
[0m[31m                  (type_identifier)
[0m[31m                  (type_identifier)))
[0m[32m                (type_identifier)
[0m[32m                (type_identifier))
[0m              (tuple_type
                (type_identifier)
                (type_identifier))))
          (type_definition
            (type_identifier)
            (function_type
              (parameter_types
                (type_identifier))
              (tuple_type
                (type_identifier)
                (type_identifier)))))))


  8. Polymorphic function types (Scala 3 syntax):

    (compilation_unit
      (class_definition
        (identifier)
        (template_body
          (type_definition
            (type_identifier)
            (function_type
              (type_parameters
                (identifier)
                (context_bound
                  (type_identifier)))
              (function_type
                (parameter_types
[31m                  (tuple_type
[0m[31m                    (type_identifier)
[0m[31m                    (type_identifier)))
[0m[32m                  (type_identifier)
[0m[32m                  (type_identifier))
[0m                (type_identifier)))))))


  9. Compound types:

    (compilation_unit
      (function_definition
        (identifier)
        (parameters
          (parameter
            (identifier)
            (compound_type
              (type_identifier)
              (type_identifier))))
        (type_identifier)
        (block))
      (class_definition
        (identifier)
        (extends_clause
          (type_identifier)
          (type_identifier)
          (type_identifier))
        (template_body))
      (type_definition
        (type_identifier)
        (compound_type
          (generic_type
            (type_identifier)
            (type_arguments
              (type_identifier)))
          (refinement
            (function_declaration
              (identifier)
              (type_parameters
                (identifier)
                (upper_bound
                  (generic_type
                    (type_identifier)
                    (type_arguments
                      (wildcard)))))
              (type_identifier)))))
      (type_definition
        (type_identifier)
        (generic_type
          (type_identifier)
          (type_arguments
[31m            (type_identifier)
[0m[31m            (ERROR
[0m[31m              (identifier)))))
[0m[32m            (compound_type
[0m[32m              (type_identifier)
[0m[32m              (refinement
[0m[32m                (function_declaration
[0m[32m                  (identifier)
[0m[32m                  (type_identifier)))))))
[0m      (function_definition
        (identifier)
        (compound_type
          (type_identifier)
          (refinement
            (val_declaration
              (identifier)
              (type_identifier))))
        (operator_identifier)))

